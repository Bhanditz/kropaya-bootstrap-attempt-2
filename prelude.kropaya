%thing Prelude
  %expose Magma, Semigroup, Monoid, id^-, unary-thing, Foldable.
  %thing ∀S. ∃(• ∈ ⊞ S → ⊞ S → ⊟ S). Magma.
    %expose •.
  %end
  
  %thing ∀S. ∃(• ∈ ⊞ S → ⊞ S → ⊟ S). Semigroup.
    %expose •.
    ※ We want to be able to show associativity, that is:
    ※   ∀(a: S) (b: S) (c: S). (a • b) • c ≡ a • (b • c)
  %end

  %thing ∀S. ∃(•: ⊞ S → ⊞ S → ⊟ S) (id: S). Monoid.
    %expose •, id.
    ※ We want to be able to show associativity and identity, that is:
    ※   ∀(a: S) (b: S) (c: S). (a • b) • c ≡ a • (b • c)
    ※   ∀(a: S). a • id ≡ id • a ≡ a
  %end

  ※ Assuming that we have the following:
  id^- ∈ ∀x. ı(it ∈ x).  ⊞ x → ⊟ x.
  id^- it = (%return it). ※ %return turns a data into a computation; it has nothing to do with monads

  %thing ∃x. unary-thing.
  %end

  ※ Does this make sense?
  %thing ∃(container-type ∈ unary-thing). μfoldl foldMap fold. Foldable.
    %expose fold, foldl, foldr, foldMap, empty.
    fold ∈ ∀S. ∀x (y ∈ S). ∃(m ∈ Monoid x y). ⊞ container-type S → ⊟ S.
    fold = foldMap m id^-.
    foldMap ∈ ∀a. ∀S. ∀x (y ∈ S). ∃(m: Monoid x y). ⊞ (⊞ a → ⊟ S) → ⊞ container-type a → ⊟ S.
    foldl ∈ ∀a b. ⊞ (⊞ a → ⊞ b → ⊟ a) → ⊞ a → ⊞ container-type b → ⊟ a.
    foldr ∈ ∀a b. ⊞ (⊞ a → ⊞ b → ⊟ b) → ⊞ b → ⊞ container-type a → ⊟ b.
    empty ∈ ∀a. ⊞ container-type a → Bool.
  %end

%end
